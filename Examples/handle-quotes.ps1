#requires -Modules PSIni
[Diagnostics.CodeAnalysis.SuppressMessageAttribute( 'PSAvoidUsingWriteHost', '' )]
param()
<#
.SYNOPSIS
    Example script demonstrating how to handle quotation marks in INI files with PSIni v4
.DESCRIPTION
    This example shows how to:
    1. Create an INI file with quoted and unquoted values
    2. Read the INI file with Import-Ini (preserves quotes as per v4 behavior)
    3. Strip quotation marks from values when needed (to mimic v3 behavior)
    4. Add quotation marks to values when needed
.NOTES
    Version: 1.0
    Date: May 16, 2025
    Generated by Claude 3.7 Sonnet
#>

function Clone-Object {
    <#
    .SYNOPSIS
    Use the serializer to create an independent copy of an object, useful when using an object as a template
    .DESCRIPTION
    OrderedDictionary does not support cloning, so we use the serializer to create a deep copy of the object.
    #>
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute( 'PSUseApprovedVerbs', '' )]
    param($InputObject)
    [System.Management.Automation.PSSerializer]::Deserialize(
        [System.Management.Automation.PSSerializer]::Serialize(
            $InputObject
        )
    )
}

$iniFilePath = Join-Path $PSScriptRoot "settings.ini"

# Read the INI file with Import-Ini (v4 behavior - preserves quotes)
$config = Import-Ini -Path $iniFilePath
Write-Host "`nReading INI file with Import-Ini:" -ForegroundColor Yellow
Write-Host "Version with quotes: '$($config.Quotes.Version)'"
Write-Host "QuotedPath with quotes: '$($config.Quotes.QuotedPath)'"

# Demo 1: Strip ALL quotation marks from ALL values
Write-Host "`n[Demo 1] Stripping ALL quotation marks from ALL values:" -ForegroundColor Cyan
$strippedConfig = Clone-Object $config
foreach ($section in $config.Keys) {
    foreach ($key in $config[$section].Keys) {
        # Simple regex to remove surrounding quotes (both single and double)
        $strippedConfig[$section][$key] = $config[$section][$key] -replace '^[''"](.*)[''"]\s*$', '$1'
    }
}

Write-Host "Original Version: '$($config.Quotes.Version)'"
Write-Host "Stripped Version: '$($strippedConfig.Quotes.Version)'"
Write-Host "Original QuotedPath: '$($config.Quotes.QuotedPath)'"
Write-Host "Stripped QuotedPath: '$($strippedConfig.Quotes.QuotedPath)'"

# Demo 2: Strip quotation marks from specific values
Write-Host "`n[Demo 2] Stripping quotation marks from specific values:" -ForegroundColor Cyan
# Only strip quotes if they exist
$author = $config.Quotes.Author
if ($author -match '^"(.*)"$') {
    $author = $matches[1]
}
Write-Host "Original Author: '$($config.Quotes.Author)'"
Write-Host "Processed Author: '$author'"

# Demo 3: Handle double-quoted values
Write-Host "`n[Demo 3] Handling double-quoted values:" -ForegroundColor Cyan
$doubleQuoted = $config.Quotes.DoubleQuoted
$processedDoubleQuoted = $doubleQuoted -replace '^"(.*)"\s*$', '$1' # First strip outer quotes
$processedDoubleQuoted = $processedDoubleQuoted -replace '"([^"]*)"', '$1' # Then strip internal quotes
Write-Host "Original DoubleQuoted: '$doubleQuoted'"
Write-Host "Processed DoubleQuoted: '$processedDoubleQuoted'"

# Demo 4: Adding quotation marks when writing values
Write-Host "`n[Demo 4] Adding quotation marks when writing values:" -ForegroundColor Cyan
$newConfig = Clone-Object $config
$newConfig.Quotes.NewValue = 'Value needs quotes'
# Add quotes to values with spaces
$newConfig.Quotes.NewValue = "`"$($newConfig.Quotes.NewValue)`""
Write-Host "New Value with quotes: '$($newConfig.Quotes.NewValue)'"

# Demo 5: Create a function to strip quotes universally
Write-Host "`n[Demo 5] Function to strip quotes universally:" -ForegroundColor Cyan

function Remove-Quote {
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute( 'PSUseShouldProcessForStateChangingFunctions', '' )]
    param (
        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]
        [object]$InputObject
    )

    process {
        if ($InputObject -is [string]) {
            # For strings, directly strip quotes
            return $InputObject -replace '^[''"](.*)[''"]\s*$', '$1'
        }
        elseif ($InputObject -is [hashtable] -or $InputObject -is [System.Collections.Specialized.OrderedDictionary]) {
            # For hashtables or OrderedDictionary, recursively process each value
            $result = Clone-Object $InputObject
            foreach ($key in $InputObject.Keys) {
                $result[$key] = Remove-Quote -InputObject $InputObject[$key]
            }
            return $result
        }
        else {
            # For other types, return as is
            return $InputObject
        }
    }
}

$fullyStrippedConfig = Remove-Quote -InputObject $config
Write-Host "Original Path: '$($config.Quotes.QuotedPath)'"
Write-Host "Fully Stripped Path: '$($fullyStrippedConfig.Quotes.QuotedPath)'"
Write-Host "Original Empty Quoted: '$($config.Quotes.EmptyQuoted)'"
Write-Host "Fully Stripped Empty Quoted: '$($fullyStrippedConfig.Quotes.EmptyQuoted)'"

# Saving the INI file with the updated value
$outputPath = Join-Path $PSScriptRoot "settings-stripped-quotes.ini"
Export-Ini -InputObject $strippedConfig -Path $outputPath -Force
Write-Host "`nThe updated INI file has been saved to: $outputPath" -ForegroundColor Cyan
Write-Host "Use Get-Content $outputPath to view the file contents"
