#requires -Modules PSIni
[Diagnostics.CodeAnalysis.SuppressMessageAttribute( 'PSAvoidUsingWriteHost', '' )]
param()
<#
.SYNOPSIS
    Example of reading INI files using PSIni
.DESCRIPTION
    This example demonstrates how to read an INI file and display its contents
    in a structured format.
.NOTES
    Version: 2.0
    Date: May 16, 2025
    Generated by Claude 3.7 Sonnet
#>

# Set up the error action preference for cleaner output
$ErrorActionPreference = 'Stop'

# Read the INI file
$iniPath = Join-Path $PSScriptRoot "settings.ini"
$content = Import-Ini -Path $iniPath

Write-Host "== Reading INI Files ==" -ForegroundColor Cyan
Write-Host "Reading from: $iniPath" -ForegroundColor Yellow

# Display the sections in the INI file
Write-Host "`nSections found in the INI file:" -ForegroundColor Green
$content.Keys | ForEach-Object { Write-Host "  - $_" }

# Display each section with its keys and values
Write-Host "`nSection content:" -ForegroundColor Green
foreach ($section in $content.Keys) {
    Write-Host "`n[$section]" -ForegroundColor Cyan

    # Display keys and values in this section
    foreach ($key in $content[$section].Keys) {
        $value = $content[$section][$key]

        # Handle array values
        if ($value -is [System.Collections.ArrayList]) {
            Write-Host "  $key = (Array with $($value.Count) items)" -ForegroundColor Yellow
            $value | ForEach-Object { Write-Host "    - $_" }
        }
        # Handle comment keys
        elseif ($key -like "__Comment*") {
            Write-Host "  ; $value" -ForegroundColor DarkGray
        }
        # Handle regular keys
        else {
            Write-Host "  $key = $value"
        }
    }
}

# Example of accessing a specific value
Write-Host "`n== Accessing Specific Values ==" -ForegroundColor Cyan
Write-Host "Value of [keysAndComments][key1]: $($content["keysAndComments"]["key1"])" -ForegroundColor Green

# Advanced example - converting to custom objects
Write-Host "`n== Converting to PowerShell Objects ==" -ForegroundColor Cyan
$customObject = [PSCustomObject]@{
    keysAndComments = [PSCustomObject]$content["keysAndComments"]
    arrays          = [PSCustomObject]$content["arrays"]
}

Write-Host "Converted to PowerShell custom object:" -ForegroundColor Green
$customObject | Format-List
